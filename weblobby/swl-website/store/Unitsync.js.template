/*
 * A wrapper around the unitsync API interface. Provides node style async
 * functions that take the callback as the last parameter.
 */

'use strict'

var _ = require('lodash');
var Log = require('store/Log.js');

// The API returns all types as strings, this is done to cast them back.
function cast(handler){
	return function(type, val){
		if (type === 'void')
			handler(null);
		else if (type === 'bool')
			handler(null, val === 'true');
		else if (type === 'int')
			handler(null, parseInt(val));
		else if (type === 'unsigned int')
			handler(null, parseInt(val));
		else if (type === 'float')
			handler(null, parseFloat(val));
		else if (type === 'const char*')
			handler(null, val);
		else
			Log.warning("Got unknown type from unitsync: " + type);
	};
}

// unitsync is the API object returned by getUnitsyncAsync()
// result() is a function that takes the unitsync result id and the handler to
// be called once that result arrives.
module.exports = function(unitsync, result){
	_.extend(this, {
		jsReadFileVFS: function(fd, size, done){
			var id = _.uniqueId();
			unitsync.jsReadFileVFS(id, fd, size);
			result(id, cast(done));
		},
		${js_wrapper_methods_reactjs}
	});
	_.mapValues(this, function(f){ return f.bind(this); }, this);
};
