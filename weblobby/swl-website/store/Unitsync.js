// DO NOT EDIT: THIS FILE WAS GENERATED by unitsync wrapper generator
// from store/Unitsync.js.template. Edit that file instead.
/*
 * A wrapper around the unitsync API interface. Provides node style async
 * functions that take the callback as the last parameter.
 */

'use strict'

var _ = require('lodash');
var Log = require('store/Log.js');

// The API returns all types as strings, this is done to cast them back.
function cast(handler){
	return function(type, val){
		if (type === 'void')
			handler(null);
		else if (type === 'bool')
			handler(null, val === 'true');
		else if (type === 'int')
			handler(null, parseInt(val));
		else if (type === 'unsigned int')
			handler(null, parseInt(val));
		else if (type === 'float')
			handler(null, parseFloat(val));
		else if (type === 'const char*')
			handler(null, val);
		else
			Log.warning("Got unknown type from unitsync: " + type);
	};
}

// unitsync is the API object returned by getUnitsyncAsync()
// result() is a function that takes the unitsync result id and the handler to
// be called once that result arrives.
module.exports = function(unitsync, result){
	_.extend(this, {
		jsReadFileVFS: function(fd, size, done){
			var id = _.uniqueId();
			unitsync.jsReadFileVFS(id, fd, size);
			result(id, cast(done));
		},
		getNextError: function(done){
			var id = _.uniqueId();
			unitsync.getNextError(id);
			result(id, cast(done));
		},
		getSpringVersion: function(done){
			var id = _.uniqueId();
			unitsync.getSpringVersion(id);
			result(id, cast(done));
		},
		getSpringVersionPatchset: function(done){
			var id = _.uniqueId();
			unitsync.getSpringVersionPatchset(id);
			result(id, cast(done));
		},
		isSpringReleaseVersion: function(done){
			var id = _.uniqueId();
			unitsync.isSpringReleaseVersion(id);
			result(id, cast(done));
		},
		init: function(isServer, id, done){
			var id = _.uniqueId();
			unitsync.init(id, isServer, id);
			result(id, cast(done));
		},
		unInit: function(done){
			var id = _.uniqueId();
			unitsync.unInit(id);
			result(id, cast(done));
		},
		getWritableDataDirectory: function(done){
			var id = _.uniqueId();
			unitsync.getWritableDataDirectory(id);
			result(id, cast(done));
		},
		getDataDirectoryCount: function(done){
			var id = _.uniqueId();
			unitsync.getDataDirectoryCount(id);
			result(id, cast(done));
		},
		getDataDirectory: function(index, done){
			var id = _.uniqueId();
			unitsync.getDataDirectory(id, index);
			result(id, cast(done));
		},
		processUnits: function(done){
			var id = _.uniqueId();
			unitsync.processUnits(id);
			result(id, cast(done));
		},
		getUnitCount: function(done){
			var id = _.uniqueId();
			unitsync.getUnitCount(id);
			result(id, cast(done));
		},
		getUnitName: function(unit, done){
			var id = _.uniqueId();
			unitsync.getUnitName(id, unit);
			result(id, cast(done));
		},
		getFullUnitName: function(unit, done){
			var id = _.uniqueId();
			unitsync.getFullUnitName(id, unit);
			result(id, cast(done));
		},
		addArchive: function(archiveName, done){
			var id = _.uniqueId();
			unitsync.addArchive(id, archiveName);
			result(id, cast(done));
		},
		addAllArchives: function(rootArchiveName, done){
			var id = _.uniqueId();
			unitsync.addAllArchives(id, rootArchiveName);
			result(id, cast(done));
		},
		removeAllArchives: function(done){
			var id = _.uniqueId();
			unitsync.removeAllArchives(id);
			result(id, cast(done));
		},
		getArchiveChecksum: function(archiveName, done){
			var id = _.uniqueId();
			unitsync.getArchiveChecksum(id, archiveName);
			result(id, cast(done));
		},
		getArchivePath: function(archiveName, done){
			var id = _.uniqueId();
			unitsync.getArchivePath(id, archiveName);
			result(id, cast(done));
		},
		getMapCount: function(done){
			var id = _.uniqueId();
			unitsync.getMapCount(id);
			result(id, cast(done));
		},
		getMapName: function(index, done){
			var id = _.uniqueId();
			unitsync.getMapName(id, index);
			result(id, cast(done));
		},
		getMapFileName: function(index, done){
			var id = _.uniqueId();
			unitsync.getMapFileName(id, index);
			result(id, cast(done));
		},
		getMapDescription: function(index, done){
			var id = _.uniqueId();
			unitsync.getMapDescription(id, index);
			result(id, cast(done));
		},
		getMapAuthor: function(index, done){
			var id = _.uniqueId();
			unitsync.getMapAuthor(id, index);
			result(id, cast(done));
		},
		getMapWidth: function(index, done){
			var id = _.uniqueId();
			unitsync.getMapWidth(id, index);
			result(id, cast(done));
		},
		getMapHeight: function(index, done){
			var id = _.uniqueId();
			unitsync.getMapHeight(id, index);
			result(id, cast(done));
		},
		getMapTidalStrength: function(index, done){
			var id = _.uniqueId();
			unitsync.getMapTidalStrength(id, index);
			result(id, cast(done));
		},
		getMapWindMin: function(index, done){
			var id = _.uniqueId();
			unitsync.getMapWindMin(id, index);
			result(id, cast(done));
		},
		getMapWindMax: function(index, done){
			var id = _.uniqueId();
			unitsync.getMapWindMax(id, index);
			result(id, cast(done));
		},
		getMapGravity: function(index, done){
			var id = _.uniqueId();
			unitsync.getMapGravity(id, index);
			result(id, cast(done));
		},
		getMapResourceCount: function(index, done){
			var id = _.uniqueId();
			unitsync.getMapResourceCount(id, index);
			result(id, cast(done));
		},
		getMapResourceName: function(index, resourceIndex, done){
			var id = _.uniqueId();
			unitsync.getMapResourceName(id, index, resourceIndex);
			result(id, cast(done));
		},
		getMapResourceMax: function(index, resourceIndex, done){
			var id = _.uniqueId();
			unitsync.getMapResourceMax(id, index, resourceIndex);
			result(id, cast(done));
		},
		getMapResourceExtractorRadius: function(index, resourceIndex, done){
			var id = _.uniqueId();
			unitsync.getMapResourceExtractorRadius(id, index, resourceIndex);
			result(id, cast(done));
		},
		getMapPosCount: function(index, done){
			var id = _.uniqueId();
			unitsync.getMapPosCount(id, index);
			result(id, cast(done));
		},
		getMapPosX: function(index, posIndex, done){
			var id = _.uniqueId();
			unitsync.getMapPosX(id, index, posIndex);
			result(id, cast(done));
		},
		getMapPosZ: function(index, posIndex, done){
			var id = _.uniqueId();
			unitsync.getMapPosZ(id, index, posIndex);
			result(id, cast(done));
		},
		getMapMinHeight: function(mapName, done){
			var id = _.uniqueId();
			unitsync.getMapMinHeight(id, mapName);
			result(id, cast(done));
		},
		getMapMaxHeight: function(mapName, done){
			var id = _.uniqueId();
			unitsync.getMapMaxHeight(id, mapName);
			result(id, cast(done));
		},
		getMapArchiveCount: function(mapName, done){
			var id = _.uniqueId();
			unitsync.getMapArchiveCount(id, mapName);
			result(id, cast(done));
		},
		getMapArchiveName: function(index, done){
			var id = _.uniqueId();
			unitsync.getMapArchiveName(id, index);
			result(id, cast(done));
		},
		getMapChecksum: function(index, done){
			var id = _.uniqueId();
			unitsync.getMapChecksum(id, index);
			result(id, cast(done));
		},
		getMapChecksumFromName: function(mapName, done){
			var id = _.uniqueId();
			unitsync.getMapChecksumFromName(id, mapName);
			result(id, cast(done));
		},
		getSkirmishAICount: function(done){
			var id = _.uniqueId();
			unitsync.getSkirmishAICount(id);
			result(id, cast(done));
		},
		getSkirmishAIInfoCount: function(index, done){
			var id = _.uniqueId();
			unitsync.getSkirmishAIInfoCount(id, index);
			result(id, cast(done));
		},
		getInfoKey: function(index, done){
			var id = _.uniqueId();
			unitsync.getInfoKey(id, index);
			result(id, cast(done));
		},
		getInfoType: function(index, done){
			var id = _.uniqueId();
			unitsync.getInfoType(id, index);
			result(id, cast(done));
		},
		getInfoValueString: function(index, done){
			var id = _.uniqueId();
			unitsync.getInfoValueString(id, index);
			result(id, cast(done));
		},
		getInfoValueInteger: function(index, done){
			var id = _.uniqueId();
			unitsync.getInfoValueInteger(id, index);
			result(id, cast(done));
		},
		getInfoValueFloat: function(index, done){
			var id = _.uniqueId();
			unitsync.getInfoValueFloat(id, index);
			result(id, cast(done));
		},
		getInfoValueBool: function(index, done){
			var id = _.uniqueId();
			unitsync.getInfoValueBool(id, index);
			result(id, cast(done));
		},
		getInfoDescription: function(index, done){
			var id = _.uniqueId();
			unitsync.getInfoDescription(id, index);
			result(id, cast(done));
		},
		getSkirmishAIOptionCount: function(index, done){
			var id = _.uniqueId();
			unitsync.getSkirmishAIOptionCount(id, index);
			result(id, cast(done));
		},
		getPrimaryModCount: function(done){
			var id = _.uniqueId();
			unitsync.getPrimaryModCount(id);
			result(id, cast(done));
		},
		getPrimaryModInfoCount: function(index, done){
			var id = _.uniqueId();
			unitsync.getPrimaryModInfoCount(id, index);
			result(id, cast(done));
		},
		getPrimaryModArchive: function(index, done){
			var id = _.uniqueId();
			unitsync.getPrimaryModArchive(id, index);
			result(id, cast(done));
		},
		getPrimaryModArchiveCount: function(index, done){
			var id = _.uniqueId();
			unitsync.getPrimaryModArchiveCount(id, index);
			result(id, cast(done));
		},
		getPrimaryModArchiveList: function(archive, done){
			var id = _.uniqueId();
			unitsync.getPrimaryModArchiveList(id, archive);
			result(id, cast(done));
		},
		getPrimaryModIndex: function(name, done){
			var id = _.uniqueId();
			unitsync.getPrimaryModIndex(id, name);
			result(id, cast(done));
		},
		getPrimaryModChecksum: function(index, done){
			var id = _.uniqueId();
			unitsync.getPrimaryModChecksum(id, index);
			result(id, cast(done));
		},
		getPrimaryModChecksumFromName: function(name, done){
			var id = _.uniqueId();
			unitsync.getPrimaryModChecksumFromName(id, name);
			result(id, cast(done));
		},
		getSideCount: function(done){
			var id = _.uniqueId();
			unitsync.getSideCount(id);
			result(id, cast(done));
		},
		getSideName: function(side, done){
			var id = _.uniqueId();
			unitsync.getSideName(id, side);
			result(id, cast(done));
		},
		getSideStartUnit: function(side, done){
			var id = _.uniqueId();
			unitsync.getSideStartUnit(id, side);
			result(id, cast(done));
		},
		getMapOptionCount: function(mapName, done){
			var id = _.uniqueId();
			unitsync.getMapOptionCount(id, mapName);
			result(id, cast(done));
		},
		getModOptionCount: function(done){
			var id = _.uniqueId();
			unitsync.getModOptionCount(id);
			result(id, cast(done));
		},
		getCustomOptionCount: function(fileName, done){
			var id = _.uniqueId();
			unitsync.getCustomOptionCount(id, fileName);
			result(id, cast(done));
		},
		getOptionKey: function(optIndex, done){
			var id = _.uniqueId();
			unitsync.getOptionKey(id, optIndex);
			result(id, cast(done));
		},
		getOptionScope: function(optIndex, done){
			var id = _.uniqueId();
			unitsync.getOptionScope(id, optIndex);
			result(id, cast(done));
		},
		getOptionName: function(optIndex, done){
			var id = _.uniqueId();
			unitsync.getOptionName(id, optIndex);
			result(id, cast(done));
		},
		getOptionSection: function(optIndex, done){
			var id = _.uniqueId();
			unitsync.getOptionSection(id, optIndex);
			result(id, cast(done));
		},
		getOptionStyle: function(optIndex, done){
			var id = _.uniqueId();
			unitsync.getOptionStyle(id, optIndex);
			result(id, cast(done));
		},
		getOptionDesc: function(optIndex, done){
			var id = _.uniqueId();
			unitsync.getOptionDesc(id, optIndex);
			result(id, cast(done));
		},
		getOptionType: function(optIndex, done){
			var id = _.uniqueId();
			unitsync.getOptionType(id, optIndex);
			result(id, cast(done));
		},
		getOptionBoolDef: function(optIndex, done){
			var id = _.uniqueId();
			unitsync.getOptionBoolDef(id, optIndex);
			result(id, cast(done));
		},
		getOptionNumberDef: function(optIndex, done){
			var id = _.uniqueId();
			unitsync.getOptionNumberDef(id, optIndex);
			result(id, cast(done));
		},
		getOptionNumberMin: function(optIndex, done){
			var id = _.uniqueId();
			unitsync.getOptionNumberMin(id, optIndex);
			result(id, cast(done));
		},
		getOptionNumberMax: function(optIndex, done){
			var id = _.uniqueId();
			unitsync.getOptionNumberMax(id, optIndex);
			result(id, cast(done));
		},
		getOptionNumberStep: function(optIndex, done){
			var id = _.uniqueId();
			unitsync.getOptionNumberStep(id, optIndex);
			result(id, cast(done));
		},
		getOptionStringDef: function(optIndex, done){
			var id = _.uniqueId();
			unitsync.getOptionStringDef(id, optIndex);
			result(id, cast(done));
		},
		getOptionStringMaxLen: function(optIndex, done){
			var id = _.uniqueId();
			unitsync.getOptionStringMaxLen(id, optIndex);
			result(id, cast(done));
		},
		getOptionListCount: function(optIndex, done){
			var id = _.uniqueId();
			unitsync.getOptionListCount(id, optIndex);
			result(id, cast(done));
		},
		getOptionListDef: function(optIndex, done){
			var id = _.uniqueId();
			unitsync.getOptionListDef(id, optIndex);
			result(id, cast(done));
		},
		getOptionListItemKey: function(optIndex, itemIndex, done){
			var id = _.uniqueId();
			unitsync.getOptionListItemKey(id, optIndex, itemIndex);
			result(id, cast(done));
		},
		getOptionListItemName: function(optIndex, itemIndex, done){
			var id = _.uniqueId();
			unitsync.getOptionListItemName(id, optIndex, itemIndex);
			result(id, cast(done));
		},
		getOptionListItemDesc: function(optIndex, itemIndex, done){
			var id = _.uniqueId();
			unitsync.getOptionListItemDesc(id, optIndex, itemIndex);
			result(id, cast(done));
		},
		getModValidMapCount: function(done){
			var id = _.uniqueId();
			unitsync.getModValidMapCount(id);
			result(id, cast(done));
		},
		getModValidMap: function(index, done){
			var id = _.uniqueId();
			unitsync.getModValidMap(id, index);
			result(id, cast(done));
		},
		openFileVFS: function(name, done){
			var id = _.uniqueId();
			unitsync.openFileVFS(id, name);
			result(id, cast(done));
		},
		closeFileVFS: function(file, done){
			var id = _.uniqueId();
			unitsync.closeFileVFS(id, file);
			result(id, cast(done));
		},
		fileSizeVFS: function(file, done){
			var id = _.uniqueId();
			unitsync.fileSizeVFS(id, file);
			result(id, cast(done));
		},
		initFindVFS: function(pattern, done){
			var id = _.uniqueId();
			unitsync.initFindVFS(id, pattern);
			result(id, cast(done));
		},
		initDirListVFS: function(path, pattern, modes, done){
			var id = _.uniqueId();
			unitsync.initDirListVFS(id, path, pattern, modes);
			result(id, cast(done));
		},
		initSubDirsVFS: function(path, pattern, modes, done){
			var id = _.uniqueId();
			unitsync.initSubDirsVFS(id, path, pattern, modes);
			result(id, cast(done));
		},
		openArchive: function(name, done){
			var id = _.uniqueId();
			unitsync.openArchive(id, name);
			result(id, cast(done));
		},
		closeArchive: function(archive, done){
			var id = _.uniqueId();
			unitsync.closeArchive(id, archive);
			result(id, cast(done));
		},
		openArchiveFile: function(archive, name, done){
			var id = _.uniqueId();
			unitsync.openArchiveFile(id, archive, name);
			result(id, cast(done));
		},
		closeArchiveFile: function(archive, file, done){
			var id = _.uniqueId();
			unitsync.closeArchiveFile(id, archive, file);
			result(id, cast(done));
		},
		sizeArchiveFile: function(archive, file, done){
			var id = _.uniqueId();
			unitsync.sizeArchiveFile(id, archive, file);
			result(id, cast(done));
		},
		setSpringConfigFile: function(fileNameAsAbsolutePath, done){
			var id = _.uniqueId();
			unitsync.setSpringConfigFile(id, fileNameAsAbsolutePath);
			result(id, cast(done));
		},
		getSpringConfigFile: function(done){
			var id = _.uniqueId();
			unitsync.getSpringConfigFile(id);
			result(id, cast(done));
		},
		getSpringConfigString: function(name, defValue, done){
			var id = _.uniqueId();
			unitsync.getSpringConfigString(id, name, defValue);
			result(id, cast(done));
		},
		getSpringConfigInt: function(name, defValue, done){
			var id = _.uniqueId();
			unitsync.getSpringConfigInt(id, name, defValue);
			result(id, cast(done));
		},
		getSpringConfigFloat: function(name, defValue, done){
			var id = _.uniqueId();
			unitsync.getSpringConfigFloat(id, name, defValue);
			result(id, cast(done));
		},
		setSpringConfigString: function(name, value, done){
			var id = _.uniqueId();
			unitsync.setSpringConfigString(id, name, value);
			result(id, cast(done));
		},
		setSpringConfigInt: function(name, value, done){
			var id = _.uniqueId();
			unitsync.setSpringConfigInt(id, name, value);
			result(id, cast(done));
		},
		setSpringConfigFloat: function(name, value, done){
			var id = _.uniqueId();
			unitsync.setSpringConfigFloat(id, name, value);
			result(id, cast(done));
		},
		deleteSpringConfigKey: function(name, done){
			var id = _.uniqueId();
			unitsync.deleteSpringConfigKey(id, name);
			result(id, cast(done));
		},
		lpClose: function(done){
			var id = _.uniqueId();
			unitsync.lpClose(id);
			result(id, cast(done));
		},
		lpOpenFile: function(fileName, fileModes, accessModes, done){
			var id = _.uniqueId();
			unitsync.lpOpenFile(id, fileName, fileModes, accessModes);
			result(id, cast(done));
		},
		lpOpenSource: function(source, accessModes, done){
			var id = _.uniqueId();
			unitsync.lpOpenSource(id, source, accessModes);
			result(id, cast(done));
		},
		lpExecute: function(done){
			var id = _.uniqueId();
			unitsync.lpExecute(id);
			result(id, cast(done));
		},
		lpErrorLog: function(done){
			var id = _.uniqueId();
			unitsync.lpErrorLog(id);
			result(id, cast(done));
		},
		lpAddTableInt: function(key, override, done){
			var id = _.uniqueId();
			unitsync.lpAddTableInt(id, key, override);
			result(id, cast(done));
		},
		lpAddTableStr: function(key, override, done){
			var id = _.uniqueId();
			unitsync.lpAddTableStr(id, key, override);
			result(id, cast(done));
		},
		lpEndTable: function(done){
			var id = _.uniqueId();
			unitsync.lpEndTable(id);
			result(id, cast(done));
		},
		lpAddIntKeyIntVal: function(key, value, done){
			var id = _.uniqueId();
			unitsync.lpAddIntKeyIntVal(id, key, value);
			result(id, cast(done));
		},
		lpAddStrKeyIntVal: function(key, value, done){
			var id = _.uniqueId();
			unitsync.lpAddStrKeyIntVal(id, key, value);
			result(id, cast(done));
		},
		lpAddIntKeyBoolVal: function(key, value, done){
			var id = _.uniqueId();
			unitsync.lpAddIntKeyBoolVal(id, key, value);
			result(id, cast(done));
		},
		lpAddStrKeyBoolVal: function(key, value, done){
			var id = _.uniqueId();
			unitsync.lpAddStrKeyBoolVal(id, key, value);
			result(id, cast(done));
		},
		lpAddIntKeyFloatVal: function(key, value, done){
			var id = _.uniqueId();
			unitsync.lpAddIntKeyFloatVal(id, key, value);
			result(id, cast(done));
		},
		lpAddStrKeyFloatVal: function(key, value, done){
			var id = _.uniqueId();
			unitsync.lpAddStrKeyFloatVal(id, key, value);
			result(id, cast(done));
		},
		lpAddIntKeyStrVal: function(key, value, done){
			var id = _.uniqueId();
			unitsync.lpAddIntKeyStrVal(id, key, value);
			result(id, cast(done));
		},
		lpAddStrKeyStrVal: function(key, value, done){
			var id = _.uniqueId();
			unitsync.lpAddStrKeyStrVal(id, key, value);
			result(id, cast(done));
		},
		lpRootTable: function(done){
			var id = _.uniqueId();
			unitsync.lpRootTable(id);
			result(id, cast(done));
		},
		lpRootTableExpr: function(expr, done){
			var id = _.uniqueId();
			unitsync.lpRootTableExpr(id, expr);
			result(id, cast(done));
		},
		lpSubTableInt: function(key, done){
			var id = _.uniqueId();
			unitsync.lpSubTableInt(id, key);
			result(id, cast(done));
		},
		lpSubTableStr: function(key, done){
			var id = _.uniqueId();
			unitsync.lpSubTableStr(id, key);
			result(id, cast(done));
		},
		lpSubTableExpr: function(expr, done){
			var id = _.uniqueId();
			unitsync.lpSubTableExpr(id, expr);
			result(id, cast(done));
		},
		lpPopTable: function(done){
			var id = _.uniqueId();
			unitsync.lpPopTable(id);
			result(id, cast(done));
		},
		lpGetKeyExistsInt: function(key, done){
			var id = _.uniqueId();
			unitsync.lpGetKeyExistsInt(id, key);
			result(id, cast(done));
		},
		lpGetKeyExistsStr: function(key, done){
			var id = _.uniqueId();
			unitsync.lpGetKeyExistsStr(id, key);
			result(id, cast(done));
		},
		lpGetIntKeyType: function(key, done){
			var id = _.uniqueId();
			unitsync.lpGetIntKeyType(id, key);
			result(id, cast(done));
		},
		lpGetStrKeyType: function(key, done){
			var id = _.uniqueId();
			unitsync.lpGetStrKeyType(id, key);
			result(id, cast(done));
		},
		lpGetIntKeyListCount: function(done){
			var id = _.uniqueId();
			unitsync.lpGetIntKeyListCount(id);
			result(id, cast(done));
		},
		lpGetIntKeyListEntry: function(index, done){
			var id = _.uniqueId();
			unitsync.lpGetIntKeyListEntry(id, index);
			result(id, cast(done));
		},
		lpGetStrKeyListCount: function(done){
			var id = _.uniqueId();
			unitsync.lpGetStrKeyListCount(id);
			result(id, cast(done));
		},
		lpGetStrKeyListEntry: function(index, done){
			var id = _.uniqueId();
			unitsync.lpGetStrKeyListEntry(id, index);
			result(id, cast(done));
		},
		lpGetIntKeyIntVal: function(key, defValue, done){
			var id = _.uniqueId();
			unitsync.lpGetIntKeyIntVal(id, key, defValue);
			result(id, cast(done));
		},
		lpGetStrKeyIntVal: function(key, defValue, done){
			var id = _.uniqueId();
			unitsync.lpGetStrKeyIntVal(id, key, defValue);
			result(id, cast(done));
		},
		lpGetIntKeyBoolVal: function(key, defValue, done){
			var id = _.uniqueId();
			unitsync.lpGetIntKeyBoolVal(id, key, defValue);
			result(id, cast(done));
		},
		lpGetStrKeyBoolVal: function(key, defValue, done){
			var id = _.uniqueId();
			unitsync.lpGetStrKeyBoolVal(id, key, defValue);
			result(id, cast(done));
		},
		lpGetIntKeyFloatVal: function(key, defValue, done){
			var id = _.uniqueId();
			unitsync.lpGetIntKeyFloatVal(id, key, defValue);
			result(id, cast(done));
		},
		lpGetStrKeyFloatVal: function(key, defValue, done){
			var id = _.uniqueId();
			unitsync.lpGetStrKeyFloatVal(id, key, defValue);
			result(id, cast(done));
		},
		lpGetIntKeyStrVal: function(key, defValue, done){
			var id = _.uniqueId();
			unitsync.lpGetIntKeyStrVal(id, key, defValue);
			result(id, cast(done));
		},
		lpGetStrKeyStrVal: function(key, defValue, done){
			var id = _.uniqueId();
			unitsync.lpGetStrKeyStrVal(id, key, defValue);
			result(id, cast(done));
		},
		processUnitsNoChecksum: function(done){
			var id = _.uniqueId();
			unitsync.processUnitsNoChecksum(id);
			result(id, cast(done));
		},
		getInfoValue: function(index, done){
			var id = _.uniqueId();
			unitsync.getInfoValue(id, index);
			result(id, cast(done));
		},
		getPrimaryModName: function(index, done){
			var id = _.uniqueId();
			unitsync.getPrimaryModName(id, index);
			result(id, cast(done));
		},
		getPrimaryModShortName: function(index, done){
			var id = _.uniqueId();
			unitsync.getPrimaryModShortName(id, index);
			result(id, cast(done));
		},
		getPrimaryModVersion: function(index, done){
			var id = _.uniqueId();
			unitsync.getPrimaryModVersion(id, index);
			result(id, cast(done));
		},
		getPrimaryModMutator: function(index, done){
			var id = _.uniqueId();
			unitsync.getPrimaryModMutator(id, index);
			result(id, cast(done));
		},
		getPrimaryModGame: function(index, done){
			var id = _.uniqueId();
			unitsync.getPrimaryModGame(id, index);
			result(id, cast(done));
		},
		getPrimaryModShortGame: function(index, done){
			var id = _.uniqueId();
			unitsync.getPrimaryModShortGame(id, index);
			result(id, cast(done));
		},
		getPrimaryModDescription: function(index, done){
			var id = _.uniqueId();
			unitsync.getPrimaryModDescription(id, index);
			result(id, cast(done));
		},
		openArchiveType: function(name, type, done){
			var id = _.uniqueId();
			unitsync.openArchiveType(id, name, type);
			result(id, cast(done));
		},
	});
	_.mapValues(this, function(f){ return f.bind(this); }, this);
};
